/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/explicit-module-boundary-types */
// @dynamic
export class MdsArrayUtils {
}
MdsArrayUtils.countUniqueValues = (data) => {
    const count = {};
    data.forEach((i) => {
        count[i] = (count[i] || 0) + 1;
    });
    return count;
};
MdsArrayUtils.filterMultiple = (data, key, filterdata) => {
    // console.log('FilterMultiple', data, key, filterdata)
    filterdata = filterdata.join().toLocaleLowerCase().split(',');
    const newdata = [];
    data.filter((item) => {
        if (item[key]) {
            item[key] = item[key].includes(',') ? item[key].split(',') : item[key];
            const isArray = Array.isArray(item[key]);
            // If values of key is string
            if (!isArray) {
                if (filterdata.indexOf(item[key].toLocaleLowerCase()) !== -1) {
                    newdata.push(item);
                }
            }
            // If values of key is Array
            if (isArray) {
                item[key].forEach((val) => {
                    if (filterdata.indexOf(val.toLocaleLowerCase()) !== -1) {
                        newdata.push(item);
                    }
                });
            }
        }
    });
    return [...new Set(newdata)];
};
MdsArrayUtils.groupValues = (arr, key) => {
    const keyvalue = (a) => a[key];
    return arr.reduce((r, v, i, a, k = keyvalue(v)) => ((r[k] || (r[k] = [])).push(v), r), {});
};
MdsArrayUtils.sumValues = (arr) => {
    return arr.reduce((total, num) => total + num);
};
MdsArrayUtils.arrayTolistObject = (arr, objectkey) => {
    const groupObj = {};
    for (const item of arr) {
        const newobj = {};
        newobj[item[objectkey]] = item;
        Object.assign(groupObj, newobj);
    }
    return groupObj;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWRzLWFycmF5LXV0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbWVkZXMtdWkvc3JjL2xpYi91dGlscy9tZHMtYXJyYXktdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsdURBQXVEO0FBQ3ZELHNFQUFzRTtBQUN0RSxXQUFXO0FBQ1gsTUFBTSxPQUFPLGFBQWE7O0FBQ2YsK0JBQWlCLEdBQUcsQ0FBQyxJQUFTLEVBQU8sRUFBRTtJQUMxQyxNQUFNLEtBQUssR0FBUSxFQUFFLENBQUM7SUFDdEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQU0sRUFBRSxFQUFFO1FBQ3BCLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbkMsQ0FBQyxDQUFDLENBQUM7SUFDSCxPQUFPLEtBQUssQ0FBQztBQUNqQixDQUFDLENBQUE7QUFDTSw0QkFBYyxHQUFHLENBQUMsSUFBVyxFQUFFLEdBQVcsRUFBRSxVQUFpQixFQUFPLEVBQUU7SUFDekUsdURBQXVEO0lBQ3ZELFVBQVUsR0FBRyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDOUQsTUFBTSxPQUFPLEdBQVEsRUFBRSxDQUFDO0lBQ3hCLElBQUksQ0FBQyxNQUFNLENBQUUsQ0FBQyxJQUFTLEVBQU8sRUFBRTtRQUM1QixJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBQztZQUNWLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDdkUsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUN6Qyw2QkFBNkI7WUFDN0IsSUFBSSxDQUFDLE9BQU8sRUFBQztnQkFDVCxJQUFJLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLGlCQUFpQixFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtvQkFDMUQsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztpQkFDdEI7YUFDSjtZQUNELDRCQUE0QjtZQUM1QixJQUFJLE9BQU8sRUFBQztnQkFDUixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFFLENBQUMsR0FBVyxFQUFFLEVBQUU7b0JBQy9CLElBQUksVUFBVSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO3dCQUNwRCxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO3FCQUN0QjtnQkFDTCxDQUFDLENBQUMsQ0FBQzthQUNOO1NBQ0o7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUNILE9BQU8sQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFDakMsQ0FBQyxDQUFBO0FBQ00seUJBQVcsR0FBRyxDQUFDLEdBQVUsRUFBRSxHQUFXLEVBQU8sRUFBRTtJQUNsRCxNQUFNLFFBQVEsR0FBRyxDQUFDLENBQU0sRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3BDLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQU0sRUFBRSxDQUFNLEVBQUUsQ0FBTSxFQUFFLENBQU0sRUFBRSxJQUFTLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUN4SCxDQUFDLENBQUE7QUFDTSx1QkFBUyxHQUFHLENBQUMsR0FBUSxFQUFPLEVBQUU7SUFDakMsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFFLENBQUMsS0FBVSxFQUFFLEdBQVEsRUFBRSxFQUFFLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBRSxDQUFDO0FBQy9ELENBQUMsQ0FBQTtBQUNNLCtCQUFpQixHQUFHLENBQUMsR0FBUSxFQUFFLFNBQWlCLEVBQU8sRUFBRTtJQUM1RCxNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUM7SUFDcEIsS0FBSyxNQUFNLElBQUksSUFBSSxHQUFHLEVBQUM7UUFDbkIsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDO1FBQ3ZCLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDL0IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7S0FDbkM7SUFDRCxPQUFPLFFBQVEsQ0FBQztBQUNwQixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvZXhwbGljaXQtbW9kdWxlLWJvdW5kYXJ5LXR5cGVzICovXG4vLyBAZHluYW1pY1xuZXhwb3J0IGNsYXNzIE1kc0FycmF5VXRpbHMge1xuICAgIHN0YXRpYyBjb3VudFVuaXF1ZVZhbHVlcyA9IChkYXRhOiBhbnkpOiBhbnkgPT4ge1xuICAgICAgICBjb25zdCBjb3VudDogYW55ID0ge307XG4gICAgICAgIGRhdGEuZm9yRWFjaCgoaTogYW55KSA9PiB7XG4gICAgICAgICAgICBjb3VudFtpXSA9IChjb3VudFtpXSB8fCAwKSArIDE7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY291bnQ7XG4gICAgfVxuICAgIHN0YXRpYyBmaWx0ZXJNdWx0aXBsZSA9IChkYXRhOiBhbnlbXSwga2V5OiBzdHJpbmcsIGZpbHRlcmRhdGE6IGFueVtdKTogYW55ID0+IHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ0ZpbHRlck11bHRpcGxlJywgZGF0YSwga2V5LCBmaWx0ZXJkYXRhKVxuICAgICAgICBmaWx0ZXJkYXRhID0gZmlsdGVyZGF0YS5qb2luKCkudG9Mb2NhbGVMb3dlckNhc2UoKS5zcGxpdCgnLCcpO1xuICAgICAgICBjb25zdCBuZXdkYXRhOiBhbnkgPSBbXTtcbiAgICAgICAgZGF0YS5maWx0ZXIoIChpdGVtOiBhbnkpOiBhbnkgPT4ge1xuICAgICAgICAgICAgaWYgKGl0ZW1ba2V5XSl7XG4gICAgICAgICAgICAgICAgaXRlbVtrZXldID0gaXRlbVtrZXldLmluY2x1ZGVzKCcsJykgPyBpdGVtW2tleV0uc3BsaXQoJywnKSA6IGl0ZW1ba2V5XTtcbiAgICAgICAgICAgICAgICBjb25zdCBpc0FycmF5ID0gQXJyYXkuaXNBcnJheShpdGVtW2tleV0pO1xuICAgICAgICAgICAgICAgIC8vIElmIHZhbHVlcyBvZiBrZXkgaXMgc3RyaW5nXG4gICAgICAgICAgICAgICAgaWYgKCFpc0FycmF5KXtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpbHRlcmRhdGEuaW5kZXhPZihpdGVtW2tleV0udG9Mb2NhbGVMb3dlckNhc2UoKSkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdkYXRhLnB1c2goaXRlbSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gSWYgdmFsdWVzIG9mIGtleSBpcyBBcnJheVxuICAgICAgICAgICAgICAgIGlmIChpc0FycmF5KXtcbiAgICAgICAgICAgICAgICAgICAgaXRlbVtrZXldLmZvckVhY2goICh2YWw6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpbHRlcmRhdGEuaW5kZXhPZih2YWwudG9Mb2NhbGVMb3dlckNhc2UoKSkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3ZGF0YS5wdXNoKGl0ZW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gWy4uLm5ldyBTZXQobmV3ZGF0YSldO1xuICAgIH1cbiAgICBzdGF0aWMgZ3JvdXBWYWx1ZXMgPSAoYXJyOiBhbnlbXSwga2V5OiBzdHJpbmcpOiBhbnkgPT4ge1xuICAgICAgICBjb25zdCBrZXl2YWx1ZSA9IChhOiBhbnkpID0+IGFba2V5XTtcbiAgICAgICAgcmV0dXJuIGFyci5yZWR1Y2UoKHI6IGFueSwgdjogYW55LCBpOiBhbnksIGE6IGFueSwgazogYW55ID0ga2V5dmFsdWUodikpID0+ICgocltrXSB8fCAocltrXSA9IFtdKSkucHVzaCh2KSwgciksIHt9KTtcbiAgICB9XG4gICAgc3RhdGljIHN1bVZhbHVlcyA9IChhcnI6IGFueSk6IGFueSA9PiB7XG4gICAgICAgIHJldHVybiBhcnIucmVkdWNlKCAodG90YWw6IGFueSwgbnVtOiBhbnkpID0+IHRvdGFsICsgbnVtICk7XG4gICAgfVxuICAgIHN0YXRpYyBhcnJheVRvbGlzdE9iamVjdCA9IChhcnI6IGFueSwgb2JqZWN0a2V5OiBzdHJpbmcpOiBhbnkgPT4ge1xuICAgICAgICBjb25zdCBncm91cE9iaiA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgYXJyKXtcbiAgICAgICAgICAgIGNvbnN0IG5ld29iajogYW55ID0ge307XG4gICAgICAgICAgICBuZXdvYmpbaXRlbVtvYmplY3RrZXldXSA9IGl0ZW07XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKGdyb3VwT2JqLCBuZXdvYmopO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBncm91cE9iajtcbiAgICB9XG59XG4iXX0=