// @dynamic
export class MdsDateUtils {
    static untilNow(date, customdata, customprefix) {
        const intervals = [
            { label: 'year', seconds: 31536000 },
            { label: 'month', seconds: 2592000 },
            { label: 'day', seconds: 86400 },
            { label: 'hour', seconds: 3600 },
            { label: 'minute', seconds: 60 },
            { label: 'second', seconds: 1 },
        ];
        let prefix = 'ago';
        if (customprefix) {
            prefix = customprefix;
        }
        if (customdata) {
            customdata.forEach((item, i) => intervals[i].label = item);
        }
        const seconds = Math.floor((Date.now() - date) / 1000);
        const interval = intervals.find((i) => i.seconds < seconds);
        const count = Math.floor(seconds / interval.seconds);
        return `${count} ${interval.label}${count !== 1 && !customdata ? 's' : ''} ${prefix}`;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWRzLWRhdGUtdXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9tZWRlcy11aS9zcmMvbGliL3V0aWxzL21kcy1kYXRlLXV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFdBQVc7QUFDWCxNQUFNLE9BQU8sWUFBWTtJQUNyQixNQUFNLENBQUMsUUFBUSxDQUFDLElBQVksRUFBRSxVQUFxQixFQUFFLFlBQXFCO1FBQ3RFLE1BQU0sU0FBUyxHQUFHO1lBQ2QsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUU7WUFDcEMsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUU7WUFDcEMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUU7WUFDaEMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUU7WUFDaEMsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUU7WUFDaEMsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUU7U0FDbEMsQ0FBQztRQUNGLElBQUksTUFBTSxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLFlBQVksRUFBRTtZQUFFLE1BQU0sR0FBRyxZQUFZLENBQUM7U0FBRTtRQUM1QyxJQUFJLFVBQVUsRUFBRTtZQUFFLFVBQVUsQ0FBQyxPQUFPLENBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBRSxDQUFDO1NBQUU7UUFDakYsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztRQUN2RCxNQUFNLFFBQVEsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxDQUFDO1FBQzVELE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNyRCxPQUFPLEdBQUcsS0FBSyxJQUFJLFFBQVEsQ0FBQyxLQUFLLEdBQUcsS0FBSyxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksTUFBTSxFQUFFLENBQUM7SUFDMUYsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGR5bmFtaWNcbmV4cG9ydCBjbGFzcyBNZHNEYXRlVXRpbHMge1xuICAgIHN0YXRpYyB1bnRpbE5vdyhkYXRlOiBudW1iZXIsIGN1c3RvbWRhdGE/OiBzdHJpbmdbXSwgY3VzdG9tcHJlZml4Pzogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3QgaW50ZXJ2YWxzID0gW1xuICAgICAgICAgICAgeyBsYWJlbDogJ3llYXInLCBzZWNvbmRzOiAzMTUzNjAwMCB9LFxuICAgICAgICAgICAgeyBsYWJlbDogJ21vbnRoJywgc2Vjb25kczogMjU5MjAwMCB9LFxuICAgICAgICAgICAgeyBsYWJlbDogJ2RheScsIHNlY29uZHM6IDg2NDAwIH0sXG4gICAgICAgICAgICB7IGxhYmVsOiAnaG91cicsIHNlY29uZHM6IDM2MDAgfSxcbiAgICAgICAgICAgIHsgbGFiZWw6ICdtaW51dGUnLCBzZWNvbmRzOiA2MCB9LFxuICAgICAgICAgICAgeyBsYWJlbDogJ3NlY29uZCcsIHNlY29uZHM6IDEgfSxcbiAgICAgICAgXTtcbiAgICAgICAgbGV0IHByZWZpeCA9ICdhZ28nO1xuICAgICAgICBpZiAoY3VzdG9tcHJlZml4KSB7IHByZWZpeCA9IGN1c3RvbXByZWZpeDsgfVxuICAgICAgICBpZiAoY3VzdG9tZGF0YSkgeyBjdXN0b21kYXRhLmZvckVhY2goIChpdGVtLCBpKSA9PiBpbnRlcnZhbHNbaV0ubGFiZWwgPSBpdGVtICk7IH1cbiAgICAgICAgY29uc3Qgc2Vjb25kcyA9IE1hdGguZmxvb3IoKERhdGUubm93KCkgLSBkYXRlKSAvIDEwMDApO1xuICAgICAgICBjb25zdCBpbnRlcnZhbCA9IGludGVydmFscy5maW5kKChpKSA9PiBpLnNlY29uZHMgPCBzZWNvbmRzKTtcbiAgICAgICAgY29uc3QgY291bnQgPSBNYXRoLmZsb29yKHNlY29uZHMgLyBpbnRlcnZhbC5zZWNvbmRzKTtcbiAgICAgICAgcmV0dXJuIGAke2NvdW50fSAke2ludGVydmFsLmxhYmVsfSR7Y291bnQgIT09IDEgJiYgIWN1c3RvbWRhdGEgPyAncycgOiAnJ30gJHtwcmVmaXh9YDtcbiAgICB9XG59XG4iXX0=